/**
 * Test per bootstrapService - Generato automaticamente
 * @generated by TestSuiteGenerator
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';

// Mock di Bootstrap per evitare dipendenze esterne
vi.mock('bootstrap', () => ({
  Modal: vi.fn(),
  Collapse: vi.fn()
}));

describe('bootstrapService Service', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    // Reset window.bootstrap
    delete window.bootstrap;
  });
  
  afterEach(() => {
    vi.clearAllMocks();
    delete window.bootstrap;
  });

  describe('Bootstrap Components Export', () => {
    it('should export Modal component', async () => {
      const { Modal } = await import('../../../src/core/services/bootstrapService.js');
      
      expect(Modal).toBeDefined();
      expect(typeof Modal).toBe('function');
    });
    
    it('should export Collapse component', async () => {
      const { Collapse } = await import('../../../src/core/services/bootstrapService.js');
      
      expect(Collapse).toBeDefined();
      expect(typeof Collapse).toBe('function');
    });
    
    it('should export both components together', async () => {
      const { Modal, Collapse } = await import('../../../src/core/services/bootstrapService.js');
      
      expect(Modal).toBeDefined();
      expect(Collapse).toBeDefined();
      expect(typeof Modal).toBe('function');
      expect(typeof Collapse).toBe('function');
    });
  });
  
  describe('Global Bootstrap Setup', () => {
    it('should make Bootstrap available globally on window', async () => {
      // Import del servizio dovrebbe impostare window.bootstrap
      await import('../../../src/core/services/bootstrapService.js');
      
      expect(window.bootstrap).toBeDefined();
      expect(window.bootstrap).toHaveProperty('Modal');
      expect(window.bootstrap).toHaveProperty('Collapse');
    });
    
    it('should have Modal available globally', async () => {
      await import('../../../src/core/services/bootstrapService.js');
      
      expect(window.bootstrap.Modal).toBeDefined();
      expect(typeof window.bootstrap.Modal).toBe('function');
    });
    
    it('should have Collapse available globally', async () => {
      await import('../../../src/core/services/bootstrapService.js');
      
      expect(window.bootstrap.Collapse).toBeDefined();
      expect(typeof window.bootstrap.Collapse).toBe('function');
    });
  });
  
  describe('Component Instantiation', () => {
    it('should allow Modal instantiation', async () => {
      const { Modal } = await import('../../../src/core/services/bootstrapService.js');
      
      const mockElement = document.createElement('div');
      
      // Verifica che Modal possa essere chiamato come costruttore
      expect(() => new Modal(mockElement)).not.toThrow();
    });
    
    it('should allow Collapse instantiation', async () => {
      const { Collapse } = await import('../../../src/core/services/bootstrapService.js');
      
      const mockElement = document.createElement('div');
      
      // Verifica che Collapse possa essere chiamato come costruttore
      expect(() => new Collapse(mockElement)).not.toThrow();
    });
  });
  
  describe('Environment Compatibility', () => {
    it('should handle window object availability', async () => {
      // Il servizio dovrebbe funzionare anche se window non Ã¨ disponibile
      const originalWindow = global.window;
      
      try {
        // Simula ambiente senza window (es. Node.js)
        delete global.window;
        
        // Il servizio dovrebbe comunque essere importabile
        await expect(import('../../../src/core/services/bootstrapService.js')).resolves.toBeDefined();
      } finally {
        // Ripristina window
        global.window = originalWindow;
      }
    });
    
    it('should not throw errors during import', async () => {
      await expect(import('../../../src/core/services/bootstrapService.js')).resolves.toBeDefined();
    });
    
    it('should handle multiple imports correctly', async () => {
      // Primo import
      const module1 = await import('../../../src/core/services/bootstrapService.js');
      
      // Secondo import (dovrebbe essere lo stesso modulo)
      const module2 = await import('../../../src/core/services/bootstrapService.js');
      
      expect(module1.Modal).toBe(module2.Modal);
      expect(module1.Collapse).toBe(module2.Collapse);
    });
  });
  
  describe('Bundle Optimization', () => {
    it('should only import required Bootstrap components', async () => {
      const module = await import('../../../src/core/services/bootstrapService.js');
      
      // Verifica che solo Modal e Collapse siano esportati
      const exports = Object.keys(module);
      expect(exports).toContain('Modal');
      expect(exports).toContain('Collapse');
      
      // Non dovrebbero esserci altri componenti Bootstrap
      expect(exports.length).toBe(2);
    });
    
    it('should provide the same components globally and via import', async () => {
      const { Modal, Collapse } = await import('../../../src/core/services/bootstrapService.js');
      
      // I componenti importati dovrebbero essere gli stessi di quelli globali
      expect(Modal).toBe(window.bootstrap.Modal);
      expect(Collapse).toBe(window.bootstrap.Collapse);
    });
  });
  
  describe('Service Purpose', () => {
    it('should serve as Bootstrap component provider', async () => {
      const module = await import('../../../src/core/services/bootstrapService.js');
      
      // Il servizio dovrebbe fornire accesso ai componenti Bootstrap
      expect(module).toHaveProperty('Modal');
      expect(module).toHaveProperty('Collapse');
      
      // E dovrebbe renderli disponibili globalmente
      expect(window.bootstrap).toHaveProperty('Modal');
      expect(window.bootstrap).toHaveProperty('Collapse');
    });
    
    it('should optimize bundle by importing only needed components', async () => {
      // Il servizio dovrebbe importare solo Modal e Collapse, non tutto Bootstrap
      const module = await import('../../../src/core/services/bootstrapService.js');
      
      // Verifica che non ci siano componenti extra
      const exportedKeys = Object.keys(module);
      expect(exportedKeys).toEqual(['Modal', 'Collapse']);
    });
  });
});