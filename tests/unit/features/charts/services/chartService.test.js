/**
 * Test per chartService - Generato automaticamente
 * @generated by TestSuiteGenerator
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';

describe('chartService Service', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    
    // Reset DOM
    document.head.innerHTML = '';
    document.body.innerHTML = '';
    
    // Reset moduli per ogni test
    vi.resetModules();
  });
  
  afterEach(() => {
    vi.clearAllMocks();
    document.head.innerHTML = '';
    document.body.innerHTML = '';
  });

  describe('Service Functions Export', () => {
    it('should export all required functions', async () => {
      const chartService = await import('../../../../../src/features/charts/services/chartService.js');
      
      expect(chartService.loadGoogleCharts).toBeDefined();
      expect(chartService.createPieChart).toBeDefined();
      expect(chartService.isChartsReady).toBeDefined();
      expect(chartService.showLoadingInContainer).toBeDefined();
      expect(chartService.showErrorInContainer).toBeDefined();
      expect(chartService.showMessageInContainer).toBeDefined();
      
      expect(typeof chartService.loadGoogleCharts).toBe('function');
      expect(typeof chartService.createPieChart).toBe('function');
      expect(typeof chartService.isChartsReady).toBe('function');
      expect(typeof chartService.showLoadingInContainer).toBe('function');
      expect(typeof chartService.showErrorInContainer).toBe('function');
      expect(typeof chartService.showMessageInContainer).toBe('function');
    });
  });
  
  describe('Charts Status', () => {
    it('should check if charts are ready', async () => {
      const { isChartsReady } = await import('../../../../../src/features/charts/services/chartService.js');
      
      // Prima del caricamento dovrebbe essere false
      const result = isChartsReady();
      expect(typeof result).toBe('boolean');
    });
  });
  
  describe('Container Utilities', () => {
    it('should show loading message in container', async () => {
      const { showLoadingInContainer } = await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      showLoadingInContainer(container);
      
      expect(container.innerHTML).toContain('spinner-border');
      expect(container.innerHTML).toContain('text-primary');
      expect(container.innerHTML).toContain('d-flex');
      expect(container.innerHTML).toContain('justify-content-center');
    });
    
    it('should show error message in container', async () => {
      const { showErrorInContainer } = await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      const errorMessage = 'Test error message';
      
      showErrorInContainer(container, errorMessage);
      
      expect(container.innerHTML).toContain('alert-danger');
      expect(container.innerHTML).toContain(errorMessage);
      expect(container.innerHTML).toContain('Errore:');
    });
    
    it('should show generic message in container', async () => {
      const { showMessageInContainer } = await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      const message = 'Test message';
      
      showMessageInContainer(container, message);
      
      expect(container.innerHTML).toContain(message);
      expect(container.innerHTML).toContain('text-muted');
      expect(container.innerHTML).toContain('text-center');
      expect(container.innerHTML).toContain('mt-5');
    });
    
    it('should show message with custom class', async () => {
      const { showMessageInContainer } = await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      const message = 'Custom message';
      const customClass = 'text-success';
      
      showMessageInContainer(container, message, customClass);
      
      expect(container.innerHTML).toContain(message);
      expect(container.innerHTML).toContain(customClass);
      expect(container.innerHTML).not.toContain('text-muted');
    });
    
    it('should handle different message types', async () => {
      const { showMessageInContainer } = await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      
      // Test con diversi tipi di messaggi
      const messages = [
        { text: 'Info message', class: 'text-info' },
        { text: 'Warning message', class: 'text-warning' },
        { text: 'Success message', class: 'text-success' }
      ];
      
      messages.forEach(({ text, class: className }) => {
        showMessageInContainer(container, text, className);
        expect(container.innerHTML).toContain(text);
        expect(container.innerHTML).toContain(className);
      });
    });
  });
  
  describe('Google Charts Loading', () => {
    it('should handle loadGoogleCharts function call', async () => {
      const { loadGoogleCharts } = await import('../../../../../src/features/charts/services/chartService.js');
      
      // La funzione dovrebbe essere chiamabile senza errori
      expect(() => loadGoogleCharts()).not.toThrow();
      
      // Dovrebbe restituire una Promise
      const result = loadGoogleCharts();
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should handle multiple loadGoogleCharts calls', async () => {
      const { loadGoogleCharts } = await import('../../../../../src/features/charts/services/chartService.js');
      
      // Multiple chiamate non dovrebbero lanciare errori
      expect(() => {
        loadGoogleCharts();
        loadGoogleCharts();
        loadGoogleCharts();
      }).not.toThrow();
    });
  });
  
  describe('Chart Creation', () => {
    it('should handle createPieChart function call', async () => {
      const { createPieChart } = await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      const data = [['Task', 'Hours'], ['Work', 8], ['Sleep', 8]];
      
      // La funzione dovrebbe essere chiamabile
      expect(() => createPieChart(container, data)).not.toThrow();
      
      // Dovrebbe restituire una Promise
      const result = createPieChart(container, data);
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should handle createPieChart with options', async () => {
      const { createPieChart } = await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      const data = [['Task', 'Hours'], ['Work', 8]];
      const options = { title: 'Test Chart', pieHole: 0.4 };
      
      // La funzione dovrebbe accettare opzioni
      expect(() => createPieChart(container, data, options)).not.toThrow();
      
      const result = createPieChart(container, data, options);
      expect(result).toBeInstanceOf(Promise);
    });
  });
  
  describe('Error Handling', () => {
    it('should handle container utilities with valid containers', async () => {
      const { showLoadingInContainer, showErrorInContainer, showMessageInContainer } = 
        await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      
      // Tutte le funzioni dovrebbero funzionare con container validi
      expect(() => showLoadingInContainer(container)).not.toThrow();
      expect(() => showErrorInContainer(container, 'error')).not.toThrow();
      expect(() => showMessageInContainer(container, 'message')).not.toThrow();
    });
    
    it('should handle empty strings in utility functions', async () => {
      const { showErrorInContainer, showMessageInContainer } = 
        await import('../../../../../src/features/charts/services/chartService.js');
      
      const container = document.createElement('div');
      
      // Dovrebbero gestire stringhe vuote
      expect(() => showErrorInContainer(container, '')).not.toThrow();
      expect(() => showMessageInContainer(container, '')).not.toThrow();
    });
  });
  
  describe('Service Integration', () => {
    it('should work with DOM elements', async () => {
      const { showLoadingInContainer } = await import('../../../../../src/features/charts/services/chartService.js');
      
      // Crea un container e aggiungilo al DOM
      const container = document.createElement('div');
      container.id = 'test-chart-container';
      document.body.appendChild(container);
      
      showLoadingInContainer(container);
      
      // Verifica che il contenuto sia stato aggiunto
      expect(container.innerHTML.length).toBeGreaterThan(0);
      expect(document.getElementById('test-chart-container')).toBe(container);
    });
    
    it('should handle different container types', async () => {
      const { showMessageInContainer } = await import('../../../../../src/features/charts/services/chartService.js');
      
      // Test con diversi tipi di elementi
      const div = document.createElement('div');
      const section = document.createElement('section');
      const article = document.createElement('article');
      
      expect(() => showMessageInContainer(div, 'Test')).not.toThrow();
      expect(() => showMessageInContainer(section, 'Test')).not.toThrow();
      expect(() => showMessageInContainer(article, 'Test')).not.toThrow();
    });
  });
});