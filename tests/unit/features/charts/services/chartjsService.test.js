/**
 * Test per chartjsService - Generato automaticamente
 * @generated by TestSuiteGenerator
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';

// Mock dei componenti dipendenti
vi.mock('../../../../../src/features/charts/components/ChartTypeManager.js', () => ({
  default: vi.fn().mockImplementation(() => ({
    setChartType: vi.fn(),
    renderChart: vi.fn(() => ({ id: 'mock-chart' })),
    getAvailableChartTypes: vi.fn(() => [
      { id: 'pie', name: 'Torta', icon: 'pie-chart' },
      { id: 'bar', name: 'Barre', icon: 'bar-chart' }
    ]),
    updateChart: vi.fn(() => ({ id: 'updated-chart' })),
    cleanup: vi.fn()
  }))
}));

vi.mock('../../../../../src/features/charts/components/ResponsiveChartAdapter.js', () => ({
  default: vi.fn().mockImplementation(() => ({
    adaptLayout: vi.fn(),
    adaptOptions: vi.fn(options => ({ ...options, responsive: true })),
    handleResize: vi.fn(),
    cleanup: vi.fn()
  }))
}));

vi.mock('../../../../../src/features/charts/services/ChartExportService.js', () => ({
  default: vi.fn().mockImplementation(() => ({
    exportAsImage: vi.fn(() => Promise.resolve(new Blob())),
    downloadImage: vi.fn(),
    generateShareableLink: vi.fn(() => 'https://example.com/chart/123')
  }))
}));

// Mock globale per ChartExportService
global.ChartExportService = vi.fn().mockImplementation(() => ({
  exportAsImage: vi.fn(() => Promise.resolve(new Blob())),
  downloadImage: vi.fn(),
  generateShareableLink: vi.fn(() => 'https://example.com/chart/123')
}));

describe('chartjsService Service', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    
    // Reset DOM
    document.head.innerHTML = '';
    document.body.innerHTML = '';
    
    // Reset moduli per ogni test
    vi.resetModules();
    
    // Mock performance.now
    global.performance = { now: vi.fn(() => Date.now()) };
    
    // Mock requestIdleCallback
    global.requestIdleCallback = vi.fn(callback => setTimeout(callback, 0));
  });
  
  afterEach(() => {
    vi.clearAllMocks();
    document.head.innerHTML = '';
    document.body.innerHTML = '';
  });

  describe('Service Functions Export', () => {
    it('should export all required functions', async () => {
      const chartjsService = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      // Funzioni principali
      expect(chartjsService.createChart).toBeDefined();
      expect(chartjsService.createPieChart).toBeDefined();
      expect(chartjsService.createBarChart).toBeDefined();
      expect(chartjsService.createLineChart).toBeDefined();
      
      // Funzioni di esportazione
      expect(chartjsService.exportChartAsImage).toBeDefined();
      expect(chartjsService.downloadChartAsImage).toBeDefined();
      expect(chartjsService.generateShareableLink).toBeDefined();
      
      // Funzioni di utilitÃ 
      expect(chartjsService.getAvailableChartTypes).toBeDefined();
      expect(chartjsService.updateChart).toBeDefined();
      expect(chartjsService.getCacheStats).toBeDefined();
      expect(chartjsService.clearCache).toBeDefined();
      expect(chartjsService.isChartJsLoaded).toBeDefined();
      expect(chartjsService.isChartJsLoading).toBeDefined();
      expect(chartjsService.cleanupChartComponents).toBeDefined();
      
      // Utility functions
      expect(chartjsService.showLoadingInContainer).toBeDefined();
      expect(chartjsService.showErrorInContainer).toBeDefined();
      expect(chartjsService.showMessageInContainer).toBeDefined();
      
      // Verifica che siano funzioni
      expect(typeof chartjsService.createChart).toBe('function');
      expect(typeof chartjsService.createPieChart).toBe('function');
      expect(typeof chartjsService.createBarChart).toBe('function');
      expect(typeof chartjsService.createLineChart).toBe('function');
    });
  });
  
  describe('Chart Creation Functions', () => {
    it('should handle createPieChart function call', async () => {
      const { createPieChart } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      const data = [['Task', 'Hours'], ['Work', 8], ['Sleep', 8]];
      
      // La funzione dovrebbe essere chiamabile
      expect(() => createPieChart(container, data)).not.toThrow();
      
      // Dovrebbe restituire una Promise
      const result = createPieChart(container, data);
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should handle createBarChart function call', async () => {
      const { createBarChart } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      const data = [['Category', 'Value'], ['A', 10], ['B', 20]];
      
      expect(() => createBarChart(container, data)).not.toThrow();
      
      const result = createBarChart(container, data);
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should handle createLineChart function call', async () => {
      const { createLineChart } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      const data = [['Month', 'Sales'], ['Jan', 100], ['Feb', 150]];
      
      expect(() => createLineChart(container, data)).not.toThrow();
      
      const result = createLineChart(container, data);
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should handle createChart with different types', async () => {
      const { createChart } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      const data = [['Label', 'Value'], ['A', 1], ['B', 2]];
      
      const types = ['pie', 'bar', 'line'];
      
      types.forEach(type => {
        expect(() => createChart(container, data, {}, type)).not.toThrow();
        
        const result = createChart(container, data, {}, type);
        expect(result).toBeInstanceOf(Promise);
      });
    });
  });
  
  describe('Chart Status Functions', () => {
    it('should check Chart.js loading status', async () => {
      const { isChartJsLoaded, isChartJsLoading } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const loaded = isChartJsLoaded();
      const loading = isChartJsLoading();
      
      expect(typeof loaded).toBe('boolean');
      expect(typeof loading).toBe('boolean');
    });
    
    it('should get available chart types', async () => {
      const { getAvailableChartTypes } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const result = getAvailableChartTypes();
      expect(result).toBeInstanceOf(Promise);
    });
  });
  
  describe('Cache Management', () => {
    it('should get cache statistics', async () => {
      const { getCacheStats } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const stats = getCacheStats();
      
      expect(stats).toBeDefined();
      expect(typeof stats).toBe('object');
      expect(stats).toHaveProperty('size');
      expect(stats).toHaveProperty('hits');
      expect(stats).toHaveProperty('misses');
    });
    
    it('should clear cache', async () => {
      const { clearCache, getCacheStats } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      expect(() => clearCache()).not.toThrow();
      
      const stats = getCacheStats();
      expect(stats.size).toBe(0);
      expect(stats.hits).toBe(0);
      expect(stats.misses).toBe(0);
    });
  });
  
  describe('Export Functions', () => {
    it('should handle exportChartAsImage function call', async () => {
      const { exportChartAsImage } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const mockChart = { id: 'test-chart' };
      
      const result = exportChartAsImage(mockChart, 'png', {});
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should handle downloadChartAsImage function call', async () => {
      const { downloadChartAsImage } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const mockChart = { id: 'test-chart' };
      
      const result = downloadChartAsImage(mockChart, 'test-chart', {});
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should generate shareable link', async () => {
      const { generateShareableLink } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const filters = { type: 'pie', data: 'test' };
      const chartType = 'pie';
      
      // La funzione dovrebbe essere chiamabile
      expect(() => generateShareableLink(filters, chartType)).not.toThrow();
      
      // Dovrebbe restituire una stringa
      const link = generateShareableLink(filters, chartType);
      expect(typeof link).toBe('string');
    });
  });
  
  describe('Chart Update', () => {
    it('should handle updateChart function call', async () => {
      const { updateChart } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const mockChart = { id: 'test-chart' };
      const newData = [['New', 'Data'], ['A', 5]];
      const newOptions = { title: 'Updated Chart' };
      
      const result = updateChart(mockChart, newData, newOptions);
      expect(result).toBeInstanceOf(Promise);
    });
    
    it('should handle updateChart with invalid chart', async () => {
      const { updateChart } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      await expect(updateChart(null)).rejects.toThrow('Grafico non valido per l\'aggiornamento');
    });
  });
  
  describe('Utility Functions', () => {
    it('should show loading message in container', async () => {
      const { showLoadingInContainer } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      showLoadingInContainer(container);
      
      expect(container.innerHTML).toContain('spinner-border');
      expect(container.innerHTML).toContain('text-primary');
    });
    
    it('should show error message in container', async () => {
      const { showErrorInContainer } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      const errorMessage = 'Test error';
      
      showErrorInContainer(container, errorMessage);
      
      expect(container.innerHTML).toContain('alert-danger');
      expect(container.innerHTML).toContain(errorMessage);
    });
    
    it('should show generic message in container', async () => {
      const { showMessageInContainer } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      const message = 'Test message';
      
      showMessageInContainer(container, message);
      
      expect(container.innerHTML).toContain(message);
      expect(container.innerHTML).toContain('text-muted');
    });
  });
  
  describe('Cleanup', () => {
    it('should cleanup chart components', async () => {
      const { cleanupChartComponents } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      expect(() => cleanupChartComponents()).not.toThrow();
    });
    
    it('should reset state after cleanup', async () => {
      const { cleanupChartComponents, getCacheStats, isChartJsLoaded } = 
        await import('../../../../../src/features/charts/services/chartjsService.js');
      
      cleanupChartComponents();
      
      const stats = getCacheStats();
      expect(stats.size).toBe(0);
      
      const loaded = isChartJsLoaded();
      expect(loaded).toBe(false);
    });
  });
  
  describe('Error Handling', () => {
    it('should handle container utilities with valid containers', async () => {
      const { showLoadingInContainer, showErrorInContainer, showMessageInContainer } = 
        await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      
      expect(() => showLoadingInContainer(container)).not.toThrow();
      expect(() => showErrorInContainer(container, 'error')).not.toThrow();
      expect(() => showMessageInContainer(container, 'message')).not.toThrow();
    });
    
    it('should handle chart creation with empty data', async () => {
      const { createPieChart } = await import('../../../../../src/features/charts/services/chartjsService.js');
      
      const container = document.createElement('div');
      const emptyData = [];
      
      const result = createPieChart(container, emptyData);
      expect(result).toBeInstanceOf(Promise);
    });
  });
});