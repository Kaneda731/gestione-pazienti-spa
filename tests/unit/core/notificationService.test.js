/**
 * Test per notificationService - Generato automaticamente
 * @generated by TestSuiteGenerator
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';

// Mock del stateService
vi.mock('../../../src/core/services/stateService.js', () => ({
  stateService: {
    subscribe: vi.fn(),
    getState: vi.fn(() => []),
    addNotification: vi.fn((type, message, duration) => Date.now()),
    removeNotification: vi.fn()
  }
}));

// Import del servizio da testare
import { notificationService } from '../../../src/core/services/notificationService.js';

describe('notificationService Service', () => {
  let mockStateService;
  
  beforeEach(async () => {
    vi.clearAllMocks();
    vi.clearAllTimers();
    vi.useFakeTimers();
    
    // Reset DOM
    document.body.innerHTML = '';
    
    // Get the mocked stateService
    const stateModule = await import('../../../src/core/services/stateService.js');
    mockStateService = stateModule.stateService;
    
    // Reset mock state
    mockStateService.getState.mockReturnValue([]);
  });
  
  afterEach(() => {
    vi.clearAllMocks();
    vi.clearAllTimers();
    vi.useRealTimers();
    document.body.innerHTML = '';
  });

  describe('Service Definition', () => {
    it('should be defined as singleton', () => {
      expect(notificationService).toBeDefined();
      expect(typeof notificationService).toBe('object');
    });
    
    it('should have required methods', () => {
      expect(typeof notificationService.show).toBe('function');
      expect(typeof notificationService.success).toBe('function');
      expect(typeof notificationService.error).toBe('function');
      expect(typeof notificationService.warning).toBe('function');
      expect(typeof notificationService.info).toBe('function');
      expect(typeof notificationService.removeNotification).toBe('function');
    });
  });
  
  describe('Notification Display Methods', () => {
    it('should show success notification', () => {
      const id = notificationService.success('Test success message');
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('success', 'Test success message', 5000);
      expect(typeof id).toBe('number');
    });
    
    it('should show error notification', () => {
      const id = notificationService.error('Test error message');
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('error', 'Test error message', 5000);
      expect(typeof id).toBe('number');
    });
    
    it('should show warning notification', () => {
      const id = notificationService.warning('Test warning message');
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('warning', 'Test warning message', 5000);
      expect(typeof id).toBe('number');
    });
    
    it('should show info notification', () => {
      const id = notificationService.info('Test info message');
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('info', 'Test info message', 5000);
      expect(typeof id).toBe('number');
    });
    
    it('should show notification with custom duration', () => {
      const id = notificationService.show('success', 'Test message', 3000);
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('success', 'Test message', 3000);
      expect(typeof id).toBe('number');
    });
    
    it('should show notification with custom duration using convenience methods', () => {
      const id = notificationService.success('Test message', 2000);
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('success', 'Test message', 2000);
      expect(typeof id).toBe('number');
    });
  });
  
  describe('Notification Removal', () => {
    it('should remove notification by id', () => {
      notificationService.removeNotification(123);
      
      // Avanza i timer per l'animazione
      vi.advanceTimersByTime(300);
      
      expect(mockStateService.removeNotification).toHaveBeenCalledWith(123);
    });
    
    it('should handle removal of non-existent notification', () => {
      notificationService.removeNotification(999);
      
      expect(mockStateService.removeNotification).toHaveBeenCalledWith(999);
    });
  });
  
  describe('Integration with StateService', () => {
    it('should call stateService addNotification correctly', () => {
      notificationService.show('info', 'Test message', 2000);
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('info', 'Test message', 2000);
    });
    
    it('should call stateService removeNotification correctly', () => {
      notificationService.removeNotification(456);
      
      vi.advanceTimersByTime(300);
      
      expect(mockStateService.removeNotification).toHaveBeenCalledWith(456);
    });
  });
  
  describe('Method Parameters', () => {
    it('should handle different message types', () => {
      const types = ['success', 'error', 'warning', 'info'];
      
      types.forEach(type => {
        notificationService.show(type, `Test ${type} message`);
        expect(mockStateService.addNotification).toHaveBeenCalledWith(type, `Test ${type} message`, 5000);
      });
    });
    
    it('should handle empty messages', () => {
      const id = notificationService.show('info', '');
      
      expect(mockStateService.addNotification).toHaveBeenCalledWith('info', '', 5000);
      expect(typeof id).toBe('number');
    });
    
    it('should handle different duration values', () => {
      const durations = [1000, 3000, 5000, 10000];
      
      durations.forEach(duration => {
        notificationService.show('info', 'Test', duration);
        expect(mockStateService.addNotification).toHaveBeenCalledWith('info', 'Test', duration);
      });
    });
  });
  
  describe('Error Handling', () => {
    it('should not throw errors when calling methods', () => {
      expect(() => notificationService.success('Test')).not.toThrow();
      expect(() => notificationService.error('Test')).not.toThrow();
      expect(() => notificationService.warning('Test')).not.toThrow();
      expect(() => notificationService.info('Test')).not.toThrow();
      expect(() => notificationService.removeNotification(1)).not.toThrow();
    });
    
    it('should handle invalid notification IDs', () => {
      expect(() => notificationService.removeNotification(null)).not.toThrow();
      expect(() => notificationService.removeNotification(undefined)).not.toThrow();
      expect(() => notificationService.removeNotification('invalid')).not.toThrow();
    });
  });
  
  describe('Service Initialization', () => {
    it('should have container property', () => {
      expect(notificationService).toHaveProperty('container');
    });
    
    it('should have renderNotifications method', () => {
      expect(typeof notificationService.renderNotifications).toBe('function');
    });
    
    it('should not throw when calling renderNotifications', () => {
      expect(() => notificationService.renderNotifications()).not.toThrow();
    });
  });
});